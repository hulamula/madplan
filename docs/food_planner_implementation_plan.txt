# üßæ Revised Implementation Plan ‚Äì Food Planner App (No MVVM)

## ‚úÖ 1. Core Logic (Console Version)

### 1.1 MVP Features
- [x] **Add & Save Dishes**  
  Add dishes with name + ingredients and store them in JSON.

- [x] **Test Datasets**  
  Create sample data for testing.

- [x] **Load Dishes from File**  
  Read dish list from JSON.

- [x] **Generate Meal Plan**  
  - Assign dishes to weekdays  
  - Show Danish weekdays  
  - Week starts on Monday  
  - Safety check for empty dish list

- [x] **Generate Shopping List**  
  Collect all ingredients from planned dishes.

- [x] **Save/Load Plans**  
  Save weekly plan + shopping list to disk.

---

## üñºÔ∏è 2. WPF Integration (Code-Behind Approach)

### 2.0 Setup
- [x] **GitHub Repository**  
  Source control + commits.

- [x] **Folder Structure**  
  Separate models, services, and windows.

### 2.1 UI Features (Code-Behind Only)
- [x] **File Selection**  
  Choose JSON source file via ComboBox in `MainWindow`.

- [x] **View Dishes**  
  Show dish list in `RetterWindow`.

- [x] **Add Dish UI**  
  - Open `Tilf√∏jRetWindow` from `RetterWindow`  
  - Input name + ingredients  
  - Save to shared list + file using service  
  - Refresh `RetterListView`

- [x] **Edit & Delete Dishes**  
  Enable inline editing and removal (planned).

- [x] **Meal Plan UI**  
  Generate and display a plan via button click.

- [x] **Shopping List UI**  
  Display list and save option.

### 2.2 Logic Hookups
- [x] Use shared data between windows
- [x] Reuse existing JSON service (`RetFiler`)
- [x] Add safety + input validation


### 2.3 Semantic & Style cleanup

- [ ] **Unify naming** conventions for clarity (`Ret`, `Ingrediens`, `Varer`, etc.)
- [ ] **Consistent language**: choose between Danish/English for code identifiers
- [ ] **Improve comments**:
  - Keep them concise and meaningful
  - Focus on *why* rather than *what*
- [ ] **Clarify method names**: prefer descriptive verbs like `GenererMadplan`, `Tilf√∏jIngredienserFraMadplan`
- [ ] **Structure logic cleanly**: group related code, consider utility/helper classes
- [ ] **Standardize formatting**: indentation, spacing, and line breaks
- [ ] **Remove TODOs and test code** used during implementation

---

